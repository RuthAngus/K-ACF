# This code must be run before ACF.py or similar. it has been used to index fits files from# multiple quarters#This version is to be used in the automated versionimport globimport numpy as npimport osimport os.pathimport pyfitsimport stringimport atpyimport timedef index(q):    """Produce ASCII index of all Kepler light curve files"""    # Locate all N2 light curve files (but not ones with REBIN suffix)    print q, 'QUARTER'        lcfile = np.array(glob.glob('/Users/angusr/angusr/data2/Q_%s/kplr?????????-?????????????_???.fits' %q))        Nfiles = len(lcfile)    print 'Found %d LC files' % Nfiles    kid = np.zeros(Nfiles, 'int32')    tmid = np.zeros(Nfiles, 'int32')    pq = np.zeros(Nfiles, 'int32')    aq = np.zeros(Nfiles, 'int32')    galaxy = np.zeros(Nfiles, 'int32')    variable = np.zeros(Nfiles, 'int32')    ra = np.zeros(Nfiles, 'float32') + np.nan    dec = np.zeros(Nfiles, 'float32') + np.nan    pmra = np.zeros(Nfiles, 'float32') + np.nan    pmdec = np.zeros(Nfiles, 'float32') + np.nan    gmag = np.zeros(Nfiles, 'float32') + np.nan    rmag = np.zeros(Nfiles, 'float32') + np.nan    imag = np.zeros(Nfiles, 'float32') + np.nan    zmag = np.zeros(Nfiles, 'float32') + np.nan    kepmag = np.zeros(Nfiles, 'float32') + np.nan    jmag = np.zeros(Nfiles, 'float32') + np.nan    hmag = np.zeros(Nfiles, 'float32') + np.nan    kmag = np.zeros(Nfiles, 'float32') + np.nan    gk = np.zeros(Nfiles, 'float32') + np.nan    teff = np.zeros(Nfiles, 'float32') + np.nan    logg = np.zeros(Nfiles, 'float32') + np.nan    feh = np.zeros(Nfiles, 'float32') + np.nan    ebv = np.zeros(Nfiles, 'float32') + np.nan    av = np.zeros(Nfiles, 'float32') + np.nan    rad = np.zeros(Nfiles, 'float32') + np.nan    glat = np.zeros(Nfiles, 'float32') + np.nan    glon = np.zeros(Nfiles, 'float32') + np.nan    pmtotal = np.zeros(Nfiles, 'float32') + np.nan    mtime = np.zeros(Nfiles, '15S')    module = np.zeros(Nfiles, 'int32')    output = np.zeros(Nfiles, 'int32')    quarter = np.zeros(Nfiles, 'int32')    long_cadence =np.zeros(Nfiles, 'int32')    for i in np.arange(Nfiles):        print i, '/', Nfiles# Extract file name        print lcfile[i]        base, lcname = os.path.split(lcfile[i])# Open each file and read header        hdulist = pyfits.open(lcfile[i])        hdulist[0].verify('fix')        hdr = hdulist[0].header        keywords = np.array(hdr.ascardlist().keys())# Extract keyword values        l = (keywords == 'KEPLERID')        if (sum(l) != 0): kid[i] = hdr['KEPLERID']        #l = (keywords == 'TMID')        #if (sum(l) != 0):         #    check = str(hdr['TMID'])        #    print check[0], check[1]        #    if check[0] != '<':         #        tmid[i] = int(hdr['TMID'])        #    else:         #        tmid[i] = -9999        l = (keywords == 'TMINDEX')        if (sum(l) != 0):             check = str(hdr['TMINDEX'])            print check[0], check[1]            if check[0] != '<':                 tmid[i] = int(hdr['TMINDEX'])            else:                 tmid[i] = -9999        #l = (keywords == 'PQ')        #if (sum(l) != 0): pq[i] = int(hdr['PQ'])        l = (keywords == 'AQ')        if (sum(l) != 0): aq[i] = int(hdr['AQ'])        l = (keywords == 'GALAXY')        if (sum(l) != 0): galaxy[i] = int(hdr['GALAXY'])        l = (keywords == 'VARIABLE')        if (sum(l) != 0): variable[i] = int(hdr['VARIABLE'])        #l = (keywords == 'RA')        #if (sum(l) != 0): ra[i] = np.double(hdr['RA'])        #l = (keywords == 'DEC')        #if (sum(l) != 0): dec[i] = np.double(hdr['DEC'])        l = (keywords == 'RA_OBJ')        if (sum(l) != 0): ra[i] = np.double(hdr['RA_OBJ'])        l = (keywords == 'DEC_OBJ')        if (sum(l) != 0): dec[i] = np.double(hdr['DEC_OBJ'])        #l = (keywords == 'PMRA')        #if (sum(l) != 0): pmra[i] = np.double(hdr['PMRA'])        #l = (keywords == 'PMDEC')        #if (sum(l) != 0): pmdec[i] = np.double(hdr['PMDEC'])        l = (keywords == 'GMAG')        if (sum(l) != 0): gmag[i] = np.double(hdr['GMAG'])        l = (keywords == 'RMAG')        if (sum(l) != 0): rmag[i] = np.double(hdr['RMAG'])        l = (keywords == 'IMAG')# This was the first keyword line I commented out - Ruth        #if (sum(l) != 0):        #    imag[i] = np.double(hdr['IMAG'])        #l = (keywords == 'ZMAG')        #if (sum(l) != 0): zmag[i] = np.double(hdr['ZMAG'])        l = (keywords == 'JMAG')        if (sum(l) != 0): jmag[i] = np.double(hdr['JMAG'])        l = (keywords == 'HMAG')        if (sum(l) != 0): hmag[i] = np.double(hdr['HMAG'])        l = (keywords == 'KMAG')        if (sum(l) != 0): kmag[i] = np.double(hdr['KMAG'])        l = (keywords == 'KEPMAG')        if (sum(l) != 0): kepmag[i] = np.double(hdr['KEPMAG'])        l = (keywords == 'GKCOLOR')        if (sum(l) != 0): gk[i] = np.double(hdr['GKCOLOR'])        #l = (keywords == 'TEFF')        #if (sum(l) != 0):            #teff[i] = np.double(hdr['TEFF'])        #l = (keywords == 'LOGG')        #if (sum(l) != 0): logg[i] = np.double(hdr['LOGG'])        #l = (keywords == 'FEH')        #if (sum(l) != 0): feh[i] = np.double(hdr['FEH'])        #l = (keywords == 'EBMINUSV')        #if (sum(l) != 0): ebv[i] = np.double(hdr['EBMINUSV'])        #l = (keywords == 'AV')        #if (sum(l) != 0): av[i] = np.double(hdr['AV'])        l = (keywords == 'GLAT')        if (sum(l) != 0): glat[i] = np.double(hdr['GLAT'])        l = (keywords == 'GLON')        if (sum(l) != 0): glon[i] = np.double(hdr['GLON'])        #l = (keywords == 'PMTOTAL')        #if (sum(l) != 0): pmtotal[i] = np.double(hdr['PMTOTAL'])        #l = (keywords == 'RADIUS')        #if (sum(l) != 0): rad[i] = np.double(hdr['RADIUS'])        '''hdr2 = hdulist[1].header        keywords2 = np.array(hdr2.ascardlist().keys())        l = (keywords2 == 'MODULE')        if (sum(l) != 0): module[i] = hdr2['MODULE']        l = (keywords2 == 'OUTPUT')        if (sum(l) != 0): output[i] = hdr2['OUTPUT']        l = (keywords2 == 'DATATYPE')        if (sum(l) != 0):             if hdr2['DATATYPE'] == 'long cadence': long_cadence[i] = 1'''        l = (keywords == 'OBSMODE')        if hdr['OBSMODE'] == 'long cadence': long_cadence[i] = 1        l = (keywords == 'MODULE')        if (sum(l) != 0): module[i] = hdr['MODULE']        l = (keywords == 'OUTPUT')        if (sum(l) != 0): output[i] = hdr['OUTPUT']        l = (keywords == 'QUARTER')        if (sum(l) != 0): quarter[i] = hdr['QUARTER']        # Extract modification time        mt = time.gmtime(os.path.getmtime(lcfile[i]))        mtime[i] = '%04d%02d%02d%02d%02d%02d' % \            (mt.tm_year, mt.tm_mon, mt.tm_mday, \             mt.tm_hour, mt.tm_min, mt.tm_sec)        hdulist.close()    Nobj = np.size(np.unique(kid))    print 'Nobj = ', Nobj    print 'Found %d unique objects' % Nobj    # Store in ATpy table    t = atpy.Table()    t.add_column('keplerid', kid, description = 'Unique Kepler ID')    t.add_column('tmid', tmid, description = 'Unique 2MASS catalog ID')    t.add_column('ra', ra, description = 'RA (degrees, J2000)')    t.add_column('dec', dec, description = 'Dec (degrees, J2000)')    t.add_column('pmra', pmra, description = 'RA proper motion (as/yr)')    t.add_column('pmdec', pmdec, description = 'Dec proper motion (as/yr)')    t.add_column('gmag', gmag, description = 'g-band magnitude')    t.add_column('rmag', rmag, description = 'r-band magnitude')    t.add_column('imag', imag, description = 'i-band magnitude')    t.add_column('zmag', zmag, description = 'z-band magnitude')    t.add_column('jmag', jmag, description = '2MASS j-band magnitude')    t.add_column('hmag', hmag, description = '2MASS h-band magnitude')    t.add_column('kmag', kmag, description = '2MASS k-band magnitude')    t.add_column('kepmag', kepmag, description = 'Kepler-band magnitude')    t.add_column('gkcol', gk, description = 'g-k colour (mag)')    t.add_column('teff', teff, description = 'Effective temperature (K)')    t.add_column('logg', logg, description = 'Log10 surface gravity (cm/sec2)')    t.add_column('feh', feh, description = 'Log10 Fe/H metallicity (log(Fe/H))')    t.add_column('ebv', ebv, description = 'E(B-V) reddening (mag)')    t.add_column('av', av, description = 'A_V extinction (mag)')    t.add_column('rad', rad, description = 'Radius (solar radii)')    #t.add_column('pq', pq, description = 'Photometric quality indicator')    t.add_column('aq', aq, description = 'Astrophysical quality indicator')    t.add_column('galaxy', galaxy, description = 'Star/Galaxy indicator')    t.add_column('variable', variable, description = 'Constant/Variable indicator')    t.add_column('glat', glat, description = 'Galactic latitude')    t.add_column('glon', glon, description = 'Galactic longitude')    t.add_column('pmtotal', pmtotal, description = 'Total proper motion')    t.add_column('mtime', mtime, description = 'last modification time')    t.add_column('filename', lcfile, description = 'light curve filename')    t.add_column('module', module, description = 'CCD Module (1-25)')    t.add_column('output', output, description = 'CCD Output (1-4)')    t.add_column('quarter', quarter, description = 'Quarter number')    t.add_column('long_cadence', long_cadence, description = 'Long cadence flag (0-1)')    t = t.where(t.long_cadence == 1)    print type(kid)        savefile = '/Users/angusr/angusr/ACF/index_Q%s.ipac' %q    print q    print savefile    t.describe()    print 'Saving index in %s' % savefile    t.write(savefile, overwrite = True)    print 'len', len(t)    returnfor i in range(3, 17):    index(i)